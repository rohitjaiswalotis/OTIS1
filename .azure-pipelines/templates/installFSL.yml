
parameters:

- name: versionId
  displayName: FSL Package Version Id
  type: string
  default: "default"

- name: targetOrgUrl
  displayName: Target Org Url
  type: string
  default: https://test.salesforce.com

- name: targetOrgUsername
  displayName: Target Org Username
  type: string
  default: none

- name: targetOrgPassword
  displayName: Target Org Password
  type: string
  default: none

- name: targetOrgAuthFilePath
  displayName: Target Org Auth File Path
  type: string
  default: none

- name: continueOnError
  displayName: Continue on Error?
  type: boolean
  default: false

- name: enableDebugMode
  displayName: Debug Mode?
  type: boolean
  default: false


steps:

# get FSL package version id

- bash: |
        
        # enable exit on error
        set -e
        
        # FSL vesion id provided explicitly
        if [[ "${{parameters.versionId}}" =~ ^04t.* ]] ; then
          
          FSL_PACKAGE_VERSION_ID="${{parameters.versionId}}";
          
        # parse version id from dependencies
        else
          
          FSL_PACKAGE_VERSION_ID=$(cat $(projectConfigFile) | jq -r ".packageAliases  | to_entries | .[] | select( ( .key | test(\"^FSL(@.+)?\$\";\"i\") ) ) | .value // empty" | tail -1);
          
          if [[ ! ${FSL_PACKAGE_VERSION_ID:+1} ]] ; then
            echo "Cannot parse FSL package version id from project config file: $(projectConfigFile)!"
            exit 1;
          fi
          
        fi
        
        # set variable to pass package version to next steps
        echo "##vso[task.setvariable variable=FSL_PACKAGE_VERSION_ID]$FSL_PACKAGE_VERSION_ID"
        
  displayName: 'Assign FSL package version id'


# get Target Org creds
- ${{ if contains(parameters.targetOrgUsername, '@') }}:
  
  - bash: |
          
          # enable exit on error
          set -e
          
          # set variable to pass target org auth info to next steps
          echo "##vso[task.setvariable variable=TARGET_ORG_URL]${{ parameters.targetOrgUrl }}"
          echo "##vso[task.setvariable variable=TARGET_ORG_USERNAME]${{ parameters.targetOrgUsername }}"
          echo "##vso[task.setvariable variable=TARGET_ORG_PASSWORD]${{ parameters.targetOrgPassword }}"
          
    displayName: 'Assign Target Org creds'


- ${{ if not( eq(parameters.targetOrgAuthFilePath, 'none') ) }}:
  
  - bash: |
          
          # enable exit on error
          set -e
          
          # set variable to pass target org auth info to next steps
          echo "##vso[task.setvariable variable=TARGET_ORG_AUTH_FILE]${{ parameters.targetOrgAuthFilePath }}"
          
    displayName: 'Assign Target Org auth file path'


# install/upgrade FSL package

- bash: |
        
        # enable "debug" mode
        if [[ "${{ parameters.enableDebugMode }}" =~ ^[Tt]rue$ ]] ; then
          set -x
        fi
        
        # check if target org creds provided and FSL package version id is available
        if [[ ${TARGET_ORG_USERNAME:+1} && ${TARGET_ORG_PASSWORD:+1} ]] ; then
          
          # log in to target org by creds
          
          echo "Installing sfpowerkit plugin if no originally installed version is available ..."
          (sf plugins | grep -i "sfpowerkit") || (echo "y" | sf plugins install sfpowerkit@$(sfPowerkitVersion))
          
          DX_STATUS_CODE=$(sf sfpowerkit:auth:login -a targetOrg -u "${TARGET_ORG_USERNAME,,}" -p "${TARGET_ORG_PASSWORD}" -r "${TARGET_ORG_URL}" --json | jq .status);
          
          # early exit - error when autorizing to target org
          if [[ "$DX_STATUS_CODE" != "0" ]]; then
            echo "Error when logging in to target org as user '$TARGET_ORG_USERNAME'!"
            exit 1;
          fi
          
          echo "Successfully logged into target org as user '$TARGET_ORG_USERNAME'"
          
        elif [[ ${TARGET_ORG_AUTH_FILE:+1} ]] ; then
          
          DX_AUTH_RESPONSE=$(sf org login sfdx-url -f "$TARGET_ORG_AUTH_FILE" -a targetOrg --json);
          DX_STATUS_CODE=$(echo "$DX_AUTH_RESPONSE" | jq .status);
          
          # early exit - error when autorizing to target org by auth url
          if [[ "$DX_STATUS_CODE" != "0" ]]; then
            echo "Error when logging in to target org by auth url!"
            exit 1;
          fi
          
          TARGET_ORG_USERNAME=$(echo "$DX_AUTH_RESPONSE" | jq -r .result.username);
          
          echo "Successfully logged into target org by auth url as user '$TARGET_ORG_USERNAME'"
          
        fi
        
        
        # get packages installed into target org
        echo "Fetching packages installed into target org..."
        DX_LIST_INSTALLED_PACKAGES_RESPONSE=$(sf package installed list --target-org="targetOrg" --json);
        echo "List of already installed packages into target org: "
        echo "$DX_LIST_INSTALLED_PACKAGES_RESPONSE" | jq .
        
        DX_STATUS_CODE=$(echo "$DX_LIST_INSTALLED_PACKAGES_RESPONSE" | jq .status);
        
        # early exit - error when grabbing installed packages from target org
        if [[ "$DX_STATUS_CODE" != "0" ]]; then
          echo "ERROR: Cannot read list of installed packages from target org!"
          exit 1
        fi
        
        
        # query requested package version details
        
        FSL_PACKAGE_REQUESTED_VERSION_DETAILS=$(sf data query --target-org="targetOrg" --use-tooling-api -q "SELECT Id, Name, MajorVersion, MinorVersion, PatchVersion, BuildNumber, SubscriberPackageId, ReleaseState, IsBeta, IsDeprecated, IsSecurityReviewed, InstallValidationStatus, Dependencies FROM SubscriberPackageVersion WHERE Id='$FSL_PACKAGE_VERSION_ID'" --json | jq -r ".result.records[0] // empty" || true);
        
        FSL_PACKAGE_ID=$(echo $FSL_PACKAGE_REQUESTED_VERSION_DETAILS | jq -r ".SubscriberPackageId // empty" || true);
        FSL_PACKAGE_REQUESTED_VERSION_NAME=$(echo $FSL_PACKAGE_REQUESTED_VERSION_DETAILS | jq -r ".Name // empty" || true);
        
        FSL_PACKAGE_REQUESTED_VERSION_MAJOR=$(echo $FSL_PACKAGE_REQUESTED_VERSION_DETAILS | jq -r ".MajorVersion // empty" || true);
        FSL_PACKAGE_REQUESTED_VERSION_MINOR=$(echo $FSL_PACKAGE_REQUESTED_VERSION_DETAILS | jq -r ".MinorVersion // empty" || true);
        FSL_PACKAGE_REQUESTED_VERSION_PATCH=$(echo $FSL_PACKAGE_REQUESTED_VERSION_DETAILS | jq -r ".PatchVersion // empty" || true);
        FSL_PACKAGE_REQUESTED_VERSION_BUILD=$(echo $FSL_PACKAGE_REQUESTED_VERSION_DETAILS | jq -r ".BuildNumber // empty" || true);
        FSL_PACKAGE_REQUESTED_VERSION_NUMBER="${FSL_PACKAGE_REQUESTED_VERSION_MAJOR}.${FSL_PACKAGE_REQUESTED_VERSION_MINOR}.${FSL_PACKAGE_REQUESTED_VERSION_PATCH}.${FSL_PACKAGE_REQUESTED_VERSION_BUILD}";
        
        
        # query extra package details
        
        FSL_PACKAGE_INFO=$(sf data query --target-org="targetOrg" --use-tooling-api -q "SELECT Id, Name, NamespacePrefix, IsPackageValid, Description FROM SubscriberPackage WHERE Id='$FSL_PACKAGE_ID'" --json | jq -r ".result.records[0] // empty" || true);
        
        FSL_PACKAGE_NAME=$(echo $FSL_PACKAGE_INFO | jq -r ".Name // empty" || true);
        FSL_PACKAGE_NAMESPACE=$(echo $FSL_PACKAGE_INFO | jq -r ".NamespacePrefix // empty" || true);
        
        
        # get installed package version defails
        FSL_PACKAGE_INSTALLED_VERSION_DETAILS=$(echo "$DX_LIST_INSTALLED_PACKAGES_RESPONSE" | jq -c ".result[] | select( ( .SubscriberPackageName | test(\"^$FSL_PACKAGE_NAME\$\";\"i\") ) and ( .SubscriberPackageNamespace | test(\"^$FSL_PACKAGE_NAMESPACE\$\";\"i\") ) ) ");
        
        
        FSL_PACKAGE_SHOULD_BE_INSTALLED=true
        
        # compare requested and already installed versions to decide whether upgrade is required
        if [[ ${FSL_PACKAGE_INSTALLED_VERSION_DETAILS:+1} ]]; then
          
          FSL_PACKAGE_INSTALLED_VERSION_ID=$(echo $FSL_PACKAGE_INSTALLED_VERSION_DETAILS | jq -r ".SubscriberPackageVersionId // empty" || true);
          FSL_PACKAGE_INSTALLED_VERSION_NAME=$(echo $FSL_PACKAGE_INSTALLED_VERSION_DETAILS | jq -r ".SubscriberPackageVersionName // empty" || true);
          FSL_PACKAGE_INSTALLED_VERSION_NUMBER=$(echo $FSL_PACKAGE_INSTALLED_VERSION_DETAILS | jq -r ".SubscriberPackageVersionNumber // empty" || true);
          
          echo "Found installed FSL version '$FSL_PACKAGE_INSTALLED_VERSION_NAME' ($FSL_PACKAGE_INSTALLED_VERSION_ID, $FSL_PACKAGE_INSTALLED_VERSION_NUMBER)"
          
          FSL_PACKAGE_INSTALLED_VERSION_MAJOR=$(echo $FSL_PACKAGE_INSTALLED_VERSION_NUMBER | cut -d"." -f1);
          FSL_PACKAGE_INSTALLED_VERSION_MINOR=$(echo $FSL_PACKAGE_INSTALLED_VERSION_NUMBER | cut -d"." -f2);
          FSL_PACKAGE_INSTALLED_VERSION_PATCH=$(echo $FSL_PACKAGE_INSTALLED_VERSION_NUMBER | cut -d"." -f3);
          FSL_PACKAGE_INSTALLED_VERSION_BUILD=$(echo $FSL_PACKAGE_INSTALLED_VERSION_NUMBER | cut -d"." -f4);
          
          # compare semantic versions to decide whether dependency version is newer and should be installed
          if [[ $FSL_PACKAGE_INSTALLED_VERSION_MAJOR -gt $FSL_PACKAGE_REQUESTED_VERSION_MAJOR ]]; then 
            FSL_PACKAGE_SHOULD_BE_INSTALLED=false;
          elif [[ $FSL_PACKAGE_INSTALLED_VERSION_MAJOR -lt $FSL_PACKAGE_REQUESTED_VERSION_MAJOR ]]; then 
            FSL_PACKAGE_SHOULD_BE_INSTALLED=true;
          elif [[ $FSL_PACKAGE_INSTALLED_VERSION_MINOR -gt $FSL_PACKAGE_REQUESTED_VERSION_MINOR ]]; then 
            FSL_PACKAGE_SHOULD_BE_INSTALLED=false;
          elif [[ $FSL_PACKAGE_INSTALLED_VERSION_MINOR -lt $FSL_PACKAGE_REQUESTED_VERSION_MINOR ]]; then 
            FSL_PACKAGE_SHOULD_BE_INSTALLED=true;
          elif [[ $FSL_PACKAGE_INSTALLED_VERSION_PATCH -gt $FSL_PACKAGE_REQUESTED_VERSION_PATCH ]]; then 
            FSL_PACKAGE_SHOULD_BE_INSTALLED=false;
          elif [[ $FSL_PACKAGE_INSTALLED_VERSION_PATCH -lt $FSL_PACKAGE_REQUESTED_VERSION_PATCH ]]; then 
            FSL_PACKAGE_SHOULD_BE_INSTALLED=true;
          elif [[ $FSL_PACKAGE_INSTALLED_VERSION_BUILD -gt $FSL_PACKAGE_REQUESTED_VERSION_BUILD ]]; then 
            FSL_PACKAGE_SHOULD_BE_INSTALLED=false;
          elif [[ $FSL_PACKAGE_INSTALLED_VERSION_BUILD -lt $FSL_PACKAGE_REQUESTED_VERSION_BUILD ]]; then 
            FSL_PACKAGE_SHOULD_BE_INSTALLED=true;
          else
            FSL_PACKAGE_SHOULD_BE_INSTALLED=false;
          fi
          
          if [[ "${FSL_PACKAGE_SHOULD_BE_INSTALLED,,}" =~ ^true$ ]] ; then
            echo "Package $FSL_PACKAGE_NAME should be upgraded to '$FSL_PACKAGE_REQUESTED_VERSION_NUMBER' ($FSL_PACKAGE_REQUESTED_VERSION_NAME), because older version is currently installed: '$FSL_PACKAGE_INSTALLED_VERSION_NUMBER' ($FSL_PACKAGE_INSTALLED_VERSION_NAME)"
          else
            echo "Package $FSL_PACKAGE_NAME should not be upgraded to '$FSL_PACKAGE_REQUESTED_VERSION_NUMBER' ($FSL_PACKAGE_REQUESTED_VERSION_NAME), because currently installed version is ok: '$FSL_PACKAGE_INSTALLED_VERSION_NUMBER' ($FSL_PACKAGE_INSTALLED_VERSION_NAME)"
          fi;
          
        else
          
          echo "No FSL version has been already installed into target org!"
          FSL_PACKAGE_SHOULD_BE_INSTALLED=true
          
        fi
        
        
        if [[ "${FSL_PACKAGE_SHOULD_BE_INSTALLED,,}" =~ ^true$ ]] ; then
          
          echo "Installing FSL..."
          
          # enable exit on error
          set -e
          
          sf package install --target-org="targetOrg" -p "$FSL_PACKAGE_VERSION_ID" -r -w 1000
          
          # disable exit on error
          set +e
          
        fi
        
        
  displayName: 'Install/Upgrade FSL Package into Target Org'
  continueOnError: ${{ parameters.continueOnError }}
  timeoutInMinutes: 120


