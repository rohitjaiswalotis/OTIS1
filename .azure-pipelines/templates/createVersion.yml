
parameters:

- name: envProfile
  displayName: Environment profile
  type: string
  default: default

- name: versionName
  displayName: Package version name
  type: string
  default: none

- name: versionNumber
  displayName: Package version number
  type: string
  default: none

- name: versionDescription
  displayName: Package version description
  type: string
  default: none

- name: skipValidation
  displayName: Skip validation for package?
  type: boolean
  default: false

- name: branchMarker
  displayName: Branch marker for package
  type: string
  default: none

- name: createTag
  displayName: Create tag for version?
  type: boolean
  default: true

- name: numberOfRetries
  displayName: Number of Retries
  type: number
  default: 0

- name: savePackageDumpAsArtifact
  displayName: Save Package Dump as Artifact?
  type: boolean
  default: false

- name: packageDumpArtifactName
  displayName: Package Dump Artifact Name
  type: string
  default: PackageDump_$(Build.BuildId)_$(System.JobAttempt)

- name: enableDebugMode
  displayName: Debug Mode?
  type: boolean
  default: false
  

steps:

# build package version
- bash: |
        
        # enable "debug" mode
        if [[ "${{ parameters.enableDebugMode }}" =~ ^[Tt]rue$ ]] ; then
          set -x
          export DEBUG_MODE=1
        fi
        
        
        # include common utils
        chmod +x $(commonUtils)
        source $(commonUtils)
        
        # include config props
        chmod +x $(configProps)
        source $(configProps)
        
        
        # define notification icons
        if [[ ${BUILD_REASON,,} =~ ^schedule$ ]] ; then
          NOTIFICATION_ICON="&#x1F4E6; &#x231A;"
        elif [[ ${BUILD_REASON,,} =~ ^manual$ ]] ; then
          NOTIFICATION_ICON="&#x1F4E6; &#x270B;"
        else
          NOTIFICATION_ICON="&#x1F4E6;"
        fi
        
        
        FS_PACKAGE_LATEST_VERSION_ON_BRANCH_TAG_NAME="$(Build.SourceBranchName)-latestPackageVersion"
        FS_PACKAGE_PREV_VERSION_ON_BRANCH_TAG_NAME="$(Build.SourceBranchName)-prevPackageVersion"
        FS_PACKAGE_LATEST_VALID_VERSION_ON_BRANCH_TAG_NAME="$(Build.SourceBranchName)-latestPackageVersionValid"
        FS_PACKAGE_PREV_VALID_VERSION_ON_BRANCH_TAG_NAME="$(Build.SourceBranchName)-prevPackageVersionValid"
        
        # eavaluate base tag for commmit messages diff (depending on validation mode)
        if [[ "${{ parameters.skipValidation }}" =~ ^[Tt]rue$ ]] ; then
          FS_PACKAGE_COMMIT_MESSAGES_BASE_TAG_NAME="$FS_PACKAGE_LATEST_VERSION_ON_BRANCH_TAG_NAME";
        else
          FS_PACKAGE_COMMIT_MESSAGES_BASE_TAG_NAME="$FS_PACKAGE_LATEST_VALID_VERSION_ON_BRANCH_TAG_NAME";
        fi
        
        FS_PACKAGE_MERGED_COMMMIT_MESSAGES=$(git log -100 --merges --date-order --pretty="format:%ai (%an) %s" ${FS_PACKAGE_COMMIT_MESSAGES_BASE_TAG_NAME}..HEAD || true);
        
        
        echo "Applying transformation to project config..."
        
        PROJECT_CONFIG_FILE="$(projectConfigFile)"
        
        # replace default project config with env profile specific (if provided)
        if [[ ! "${{parameters.envProfile}}" =~ ^default$ && ! "${{parameters.envProfile}}" =~ ^none$ ]] ; then
          
          PROJECT_CONFIG_FILE_ENV_PROFILE="$(projectConfigFile).${{parameters.envProfile}}"
          
          if [[ -f "$PROJECT_CONFIG_FILE_ENV_PROFILE" ]]; then
            cp -f $PROJECT_CONFIG_FILE_ENV_PROFILE $PROJECT_CONFIG_FILE
          else
            echo "WARNING: Cannot find request project config: $PROJECT_CONFIG_FILE_ENV_PROFILE"
          fi
          
        fi
        
        # resolve variables in project config
        PROJECT_CONFIG_FILE_TMP=$(mktemp);
        cat $PROJECT_CONFIG_FILE | envsubst > ${PROJECT_CONFIG_FILE_TMP}
        mv ${PROJECT_CONFIG_FILE_TMP} $PROJECT_CONFIG_FILE
        
        echo "Instrumented $PROJECT_CONFIG_FILE:"
        cat $PROJECT_CONFIG_FILE
        
        
        if [[ ! -f "$PROJECT_CONFIG_FILE" ]]; then
          echo "Cannot find project config file '$PROJECT_CONFIG_FILE'"
          exit 1
        fi
        
        
        echo "Parsing project config file '$PROJECT_CONFIG_FILE'..."
        
        DX_PACKAGE_CONFIG=$(cat $PROJECT_CONFIG_FILE | jq -c ".packageDirectories[] | select(.package == \"$(fsPackageName)\")");
        
        
        if [[ ! ${DX_PACKAGE_CONFIG:+1} ]]; then 
          echo "Cannot find package '$(fsPackageName)' in project config file '$PROJECT_CONFIG_FILE'"
          exit 1
        fi
        
        
        # parse package version name from project config (if not provided)
        if [[ "${{parameters.versionName}}" =~ ^none$ ]] ; then
          PACKAGE_VERSION_NAME=$(echo $DX_PACKAGE_CONFIG | jq -r '.versionName // empty');
          echo "Parsed package version name from config: $PACKAGE_VERSION_NAME"
        else
          PACKAGE_VERSION_NAME="${{parameters.versionName}}"
        fi
        
        # parse package version number from project config (if not provided)
        if [[ "${{parameters.versionNumber}}" =~ ^none$ ]] ; then
          PACKAGE_VERSION_NUMBER=$(echo $DX_PACKAGE_CONFIG | jq -r '.versionNumber // empty');
          echo "Parsed package version number from config: $PACKAGE_VERSION_NUMBER"
        else
          PACKAGE_VERSION_NUMBER="${{parameters.versionNumber}}"
        fi
        
        # parse package version description from project config (if not provided)
        if [[ "${{parameters.versionDescription}}" =~ ^none$ ]] ; then
          PACKAGE_VERSION_DESCRIPTION=$(echo $DX_PACKAGE_CONFIG | jq -r '.versionDescription // empty');
          echo "Parsed package version description from config: $PACKAGE_VERSION_DESCRIPTION"
        else
          PACKAGE_VERSION_DESCRIPTION="${{parameters.versionDescription}}"
        fi
        
        
        echo "Applying transformation to source code..."
        
        TESTS_METADATA_DIR="$(packageBaseDir)-tests-meta/main"
        bash $(stepsRunnerUtil) -d "$TESTS_METADATA_DIR" -o "$TESTS_METADATA_DIR"; DX_STATUS_CODE=$?;
        
        if [[ "$DX_STATUS_CODE" == "0" ]]; then
          
          PACKAGE_BEFORE_DIR="$(packageBaseDir)-unpackaged/package/before"
          
          if [[ -d "${PACKAGE_BEFORE_DIR}" ]]; then
            bash $(stepsRunnerUtil) -d "$PACKAGE_BEFORE_DIR" -w "$(pwd)"; DX_STATUS_CODE=$?;
          else
            echo "WARNING: No '$PACKAGE_BEFORE_DIR' detected to run before package version creation"
          fi
          
        fi
        
        # early exit - error when applying transformation to source code
        if [[ "$DX_STATUS_CODE" != "0" ]]; then
          echo "Error when applying transformation to source code!"
          exit 1
        fi
        
        
        set -e
        echo "Validating source code..."
        bash $(stepsRunnerUtil) -d "$(rulesValidationScript)" -w "$(pwd)"
        set +e
        
        
        echo "Authorizing to dev hub..."
        
        DX_STATUS_CODE=$(sf org login jwt --client-id $(devHubClientId) --jwt-key-file $(devHubPrivateKey.secureFilePath) --username $(devHubUsername) -r $(devHubUrl) -a devHub --json | jq .status);
        
        # early exit - error when authorizing to dev hub
        if [[ "$DX_STATUS_CODE" != "0" ]]; then
          echo "Cannot log in to dev hub as '$(devHubUsername)'"
          exit 1
        fi
        
        echo "Successfully authorized to dev hub as '$(devHubUsername)'"
        
        
        # eavaluate validation mode
        if [[ "${{ parameters.skipValidation }}" =~ ^[Tt]rue$ ]] ; then
          PACKAGE_VALIDATION_MODE="--skip-validation"
          echo "Creating package version without validation..."
        else
          PACKAGE_VALIDATION_MODE="--code-coverage"
          echo "Creating package version with validation..."
        fi
        
        # evaluate branch marker
        if [[ "${{parameters.branchMarker}}" =~ ^none$ ]] ; then
          PACKAGE_BRANCH_MARKER=""
        else
          PACKAGE_BRANCH_MARKER="${{parameters.branchMarker}}"
        fi
        
        
        DX_PACKAGE_VERSION_CREATE_RESPONSE=$(sf package version create $PACKAGE_VALIDATION_MODE --package "$(fsPackageName)" --version-name="$PACKAGE_VERSION_NAME" --version-number="$PACKAGE_VERSION_NUMBER" --version-description="$PACKAGE_VERSION_DESCRIPTION" -x --wait 600 -v devHub --branch="$PACKAGE_BRANCH_MARKER" --tag="$(Build.SourceVersion)" --verbose --json -r);
        
        echo "$DX_PACKAGE_VERSION_CREATE_RESPONSE" | jq .
        
        
        # catching package dump
        PACKAGE_DUMP_BASE_DIR="$(packageDumpBaseDir)"
        
        if [[ -d "$PACKAGE_DUMP_BASE_DIR" ]]; then
          PACKAGE_DUMP_DIR="$PACKAGE_DUMP_BASE_DIR/$(ls -t $PACKAGE_DUMP_BASE_DIR | head -1)"
          echo "Package dump directory: $PACKAGE_DUMP_DIR"
          ls -la $PACKAGE_DUMP_DIR
        fi
        
        # set variable to pass package dump directory to next steps
        echo "##vso[task.setvariable variable=packageDumpDirectory]${PACKAGE_DUMP_DIR}"
        
        
        DX_STATUS_CODE=$(echo "$DX_PACKAGE_VERSION_CREATE_RESPONSE" | jq .status);
        
        # early exit: error on package version creation
        if [[ "$DX_STATUS_CODE" != "0" ]]; then
          
          echo "Error when creating '$(fsPackageName)' package version!"
          
          DX_ERROR_MESSAGE=$(echo "$DX_PACKAGE_VERSION_CREATE_RESPONSE" | jq -r ".message // empty");
          
          if [[ ${DX_ERROR_MESSAGE:+1} ]] ; then
            echo "$DX_ERROR_MESSAGE"
          fi
          
          DX_ERROR_MESSAGE_ESCAPED=$(escapeJson "$DX_ERROR_MESSAGE");
          
          curl -H 'Content-Type: application/json' -d '{"text": "&#x26D4; '"$NOTIFICATION_ICON"' **$(fsPackageName)** `$(Build.SourceBranchName)` ($(Build.Reason)) - package version creation [failure]($(System.TeamFoundationCollectionUri)$(System.TeamProjectId)/_build/results?buildId=$(Build.BuildId)) by $(Build.RequestedFor)! <pre>'"${DX_ERROR_MESSAGE_ESCAPED:-unknown error}"'<\/pre>\n\n**Merged PRs:**<pre>'"$(escapeJson "${FS_PACKAGE_MERGED_COMMMIT_MESSAGES:-unknown}")"'<\/pre>"}' $(notifErrorUrls)
          
          exit 1
          
        fi
        
        
        echo "Successfully uploaded '$(fsPackageName)' package version."
        
        FS_PACKAGE_VERSION_ID=$(echo "$DX_PACKAGE_VERSION_CREATE_RESPONSE" | jq -r '.result | if type=="array" then .[0].SubscriberPackageVersionId else .SubscriberPackageVersionId end // empty');
        echo "Parsed created package version id: ${FS_PACKAGE_VERSION_ID}"
        
        if ! [[ "${FS_PACKAGE_VERSION_ID}" =~ ^04t.* ]] ; then
          echo "Error when parsing created version id for '$(fsPackageName)' package!"
          exit 1
        fi
        
        # set variable to pass package version to next steps
        echo "##vso[task.setvariable variable=FS_PACKAGE_VERSION_ID]${FS_PACKAGE_VERSION_ID}"
        
        echo "Created Field Service package version details:"
        FS_PACKAGE_VERSION_DETAILS=$(sf package version report -p $FS_PACKAGE_VERSION_ID -v devHub --json);
        echo "$FS_PACKAGE_VERSION_DETAILS" | jq .
        
        FS_PACKAGE_VERSION_NUMBER=$(echo "$FS_PACKAGE_VERSION_DETAILS" | jq -r '.result.Version // empty')
        
        
        PACKAGE_AFTER_DIR="$(packageBaseDir)-unpackaged/package/after"
        
        if [[ -d "${PACKAGE_AFTER_DIR}" ]]; then
          
          bash $(stepsRunnerUtil) -d "$PACKAGE_AFTER_DIR" -w "$(pwd)"; DX_STATUS_CODE=$?;
          
          # early exit - error when executing after upload actions
          if [[ "$DX_STATUS_CODE" != "0" ]]; then
            echo "Error when executing after upload actions!"
            exit 1
          fi
          
        else
          
          echo "WARNING: No '$PACKAGE_AFTER_DIR' detected to run after package version creation!"
          
        fi
        
        
        # optionally create tag in repo with the following format: v{major}.{minor}.{build}.{patch}-{valid|skip}-{04txxxxxxxxxxxxxxx}-{branchName}
        if [[ "${{ parameters.createTag }}" =~ ^[Tt]rue$ ]] ; then
          
          FS_PACKAGE_VERSION_TAG_NAME="v${FS_PACKAGE_VERSION_NUMBER}"
          
          if [[ "${{ parameters.skipValidation }}" =~ ^[Tt]rue$ ]] ; then
            FS_PACKAGE_VERSION_TAG_NAME="${FS_PACKAGE_VERSION_TAG_NAME}-skip"
          else
            FS_PACKAGE_VERSION_TAG_NAME="${FS_PACKAGE_VERSION_TAG_NAME}-valid"
          fi
          
          FS_PACKAGE_VERSION_TAG_NAME="${FS_PACKAGE_VERSION_TAG_NAME}-${FS_PACKAGE_VERSION_ID}-$(Build.SourceBranchName)"
          
          git config --global user.name "BuildService"
          git config --global user.email "pipeline.package.fs@otis.com"
          git tag -a "$FS_PACKAGE_VERSION_TAG_NAME" -m "Field Service Package Version: $FS_PACKAGE_VERSION_NUMBER"
          git push origin "$FS_PACKAGE_VERSION_TAG_NAME"
          
          # update package version with just created tag
          echo "Updating package version '$FS_PACKAGE_VERSION_NUMBER' ($FS_PACKAGE_VERSION_ID) with just created tag '$FS_PACKAGE_VERSION_TAG_NAME'..."
          DX_PACKAGE_VERSION_UPDATE_RESPONSE=$(sf package version update --package "$FS_PACKAGE_VERSION_ID" --tag "$FS_PACKAGE_VERSION_TAG_NAME" -v devHub --json);
          echo "$DX_PACKAGE_VERSION_UPDATE_RESPONSE" | jq .
          
          DX_STATUS_CODE=$(echo "$DX_PACKAGE_VERSION_UPDATE_RESPONSE" | jq .status);
          
          if [[ "$DX_STATUS_CODE" != "0" ]]; then
            echo "WARNING: Error when updating package version '$FS_PACKAGE_VERSION_NUMBER' ($FS_PACKAGE_VERSION_ID) with just created tag '$FS_PACKAGE_VERSION_TAG_NAME'!"
          fi
          
          
          # create extra tag to track latest snapshot of the package version for current branch
          
          # first copy latest tag into prev (suppressing errors if prev doesn't exit for first time run)
          git push -f origin "$FS_PACKAGE_LATEST_VERSION_ON_BRANCH_TAG_NAME":refs/tags/"$FS_PACKAGE_PREV_VERSION_ON_BRANCH_TAG_NAME" || true
          
          # then re-create latest tag with current commit and version
          git tag -fa "$FS_PACKAGE_LATEST_VERSION_ON_BRANCH_TAG_NAME" -m "Tag Ref: $FS_PACKAGE_VERSION_TAG_NAME"
          git push -f origin "tags/$FS_PACKAGE_LATEST_VERSION_ON_BRANCH_TAG_NAME"
          
          
          # create extra tag to track latest snapshot of the package version that passed validation for current branch
          if [[ ! "${{ parameters.skipValidation }}" =~ ^[Tt]rue$ ]] ; then
            
            # first copy latest tag into prev (suppressing errors if prev doesn't exit for first time run)
            git push -f origin "$FS_PACKAGE_LATEST_VALID_VERSION_ON_BRANCH_TAG_NAME":refs/tags/"$FS_PACKAGE_PREV_VALID_VERSION_ON_BRANCH_TAG_NAME" || true
            
            # then re-create latest tag with current commit and version
            git tag -fa "$FS_PACKAGE_LATEST_VALID_VERSION_ON_BRANCH_TAG_NAME" -m "Tag Ref: $FS_PACKAGE_VERSION_TAG_NAME"
            git push -f origin "tags/$FS_PACKAGE_LATEST_VALID_VERSION_ON_BRANCH_TAG_NAME"
            
          fi
          
        fi
        
        
        # reset changes
        git checkout $(packageBaseDir)/..
        git checkout $PROJECT_CONFIG_FILE || true
        
        
        echo "Printing dependencies of just created Field Service package version..."
        
        FS_PACKAGE_VERSION_DEPENDENCIES=$(npx -p sf-package-inspector@$(packageInspectorVersion) sf-package-inspect --orgAlias="devHub" --command="list-deps" --versionId="$FS_PACKAGE_VERSION_ID" --apiVersion="$(sfApiVersion)" || echo "unknown")
        echo "$FS_PACKAGE_VERSION_DEPENDENCIES"
        
        
        # send success notif re package version creation
        curl -H 'Content-Type: application/json' -d '{"text": "&#x2705; '"$NOTIFICATION_ICON"' **$(fsPackageName)** `$(Build.SourceBranchName)` ($(Build.Reason)) - package version creation `'"$FS_PACKAGE_VERSION_NUMBER"'` [success]($(System.TeamFoundationCollectionUri)$(System.TeamProjectId)/_build/results?buildId=$(Build.BuildId)) by $(Build.RequestedFor)!\n\n**Version Details:**<pre>'"$(escapeJson "${FS_PACKAGE_VERSION_DETAILS// /&nbsp;}")"'<\/pre> **Version Dependencies:**<pre>'"$(escapeJson "${FS_PACKAGE_VERSION_DEPENDENCIES// /&nbsp;}")"'<\/pre>\n\n**Merged PRs:**<pre>'"$(escapeJson "${FS_PACKAGE_MERGED_COMMMIT_MESSAGES:-unknown}")"'<\/pre>"}' $(notifSuccessUrls)
        
        
  displayName: 'Create Field Service package version'
  continueOnError: false
  retryCountOnTaskFailure: ${{ parameters.numberOfRetries }}
  timeoutInMinutes: 240
  

# optionally attach package dump as artifact
- ${{ if eq(parameters.savePackageDumpAsArtifact, true) }}:
  
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(packageDumpDirectory)'
      artifact: '${{ parameters.packageDumpArtifactName }}'
      publishLocation: 'pipeline'
      displayName: 'Publish Package Dump as artifact'
      condition: ne(variables.packageDumpDirectory, '')
  
