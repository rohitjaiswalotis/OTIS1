name: 'SF Field Service Deploy PR'

trigger:
 branches:
  include:
    - dev
    - dev-jpn
    - master
    - master-patch
    
pr: none


parameters:

- name: deploymentMode
  displayName: Deployment Mode
  type: string
  default: auto
  values:
  - auto
  - install
  - upgrade

- name: shouldNotifySubscribers
  displayName: Notify Subscribers?
  type: boolean
  default: true


variables:

- template: templates/variables.yml

- name: OrgAliasDevFS
  value: devFS


stages:
    
    - stage: ValidatePMD
      
      displayName: ValidatePMD
      
      jobs:
          
          - job: ValidatePMD
            
            displayName: 'Validate PMD'
            
            pool:
                vmImage: 'ubuntu-latest'
            
            steps:
            
            - checkout: self
              fetchDepth: 0
              persistCredentials: true
              
            - template: templates/scanPMD.yml
              parameters:
                pathToScan: $(packageBaseDir)
              
      
    - stage: Deploy
      
      condition: and(succeeded(), not(contains(variables['Build.SourceVersionMessage'], '[SKIP CI]')))
      
      dependsOn: 
      - ValidatePMD
      
      displayName: Deploying
      
      jobs:
          
          - deployment: release_devFS
            
            environment: devFS
            
            displayName: 'Release to devFS'
            
            timeoutInMinutes: 0
            
            pool:
                vmImage: 'ubuntu-latest'
                
            strategy:
             runOnce:
               deploy:
                
                steps:
                
                - template: templates/init.yml
                  parameters:
                    useCache: false
                  
                - task: DownloadSEcureFile@1
                  name: authFile
                  inputs:
                    ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
                      secureFile: authFile_masterFS
                    ${{ elseif eq(variables['Build.SourceBranchName'], 'master-patch') }}:
                      secureFile: authFile_patchFS
                    ${{ else }}:
                      secureFile: authFile_devFS
                  displayName: 'Copy authorization file for devFS'
                  
                  
                - template: templates/installThirdParties.yml
                  parameters:
                    targetOrgAuthFilePath: $(authFile.secureFilePath)
                    continueOnError: true
                    
                  
                - script: |
                        
                        DX_AUTH_RESPONSE=$(sf org login sfdx-url -f "$(authFile.secureFilePath)" -a "$(OrgAliasDevFS)" --json);
                        DX_STATUS_CODE=$(echo "$DX_AUTH_RESPONSE" | jq .status);
                        
                        # early exit - error when authorizing to target org by auth url
                        if [[ "$DX_STATUS_CODE" != "0" ]]; then
                          echo "Error when logging into $(OrgAliasDevFS) org by auth url!"
                          echo "$DX_AUTH_RESPONSE" | jq .
                          exit 1;
                        fi
                        
                        TARGET_ORG_USERNAME=$(echo "$DX_AUTH_RESPONSE" | jq -r .result.username);
                        
                        echo "Successfully logged into $(OrgAliasDevFS) org by auth url as user '${TARGET_ORG_USERNAME:-unknown}'"
                        
                        echo "List of already installed packages in $(OrgAliasDevFS) org: "
                        sf package installed list --target-org="$(OrgAliasDevFS)"
                        
                        # set variable to pass username to next steps
                        echo "##vso[task.setvariable variable=TARGET_ORG_USERNAME]$TARGET_ORG_USERNAME"
                        
                  displayName: 'Authenticate to devFS'
                  
                  
                - template: templates/scanFlows.yml
                  parameters:
                    pathToScan: $(packageBaseDir)
                    continueOnError: true
                    
                  
                # evaluate test level: skip tests if requested
                - ${{ if contains(variables['Build.SourceVersionMessage'], '[SKIP TESTS]') }}:
                  
                  - script: |
                        
                        # set variable to skip tests execution
                        echo "##vso[task.setvariable variable=TARGET_ORG_TEST_LEVEL]NoTestRun"
                        
                - ${{ else }}:
                  
                  - script: |
                        
                        # set variable to skip tests execution
                        echo "##vso[task.setvariable variable=TARGET_ORG_TEST_LEVEL]${TARGET_ORG_TEST_LEVEL:-RunLocalTests}"
                    
                  
                - bash: |
                        
                        # enable exit on error
                        set -e
                        
                        # set localization domain (if provided) to be available inside steps runner
                        if [[ "$(Build.SourceBranchName)" =~ ^dev-jpn$ ]] ; then
                          export SF_SR_VAR_GLOBAL_LOCALIZATION_DOMAIN="Japan";
                        else
                          export SF_SR_VAR_GLOBAL_LOCALIZATION_DOMAIN="Global";
                        fi
                        
                        echo "Reconciling profiles..."                        
                        bash $(reconcileProfilesUtil) -d "$(packageBaseDir)/main/default/profiles" -a "$(OrgAliasDevFS)" -o "$(packageBaseDir)/main/default/profiles" -p "$(profilesToReconcile)"
                        
                        
                        echo "Evaluating deployment mode..."
                        
                        if [[ "${{ parameters.deploymentMode }}" =~ ^auto$ ]] ; then
                          
                          QUERY_FS_META_MARKER_RESPONSE=$(sf data query --target-org targetOrg -q "$(fsMetaDetectionQuery)" --json);
                          echo $QUERY_FS_META_MARKER_RESPONSE | jq .
                          
                          FS_MARKER_META_COUNT=$(echo "$QUERY_FS_META_MARKER_RESPONSE" | jq -r ".result.records | length");
                          
                          if [[ $FS_MARKER_META_COUNT -gt 0 ]]; then
                            deploymentActionType="upgrade";
                          else
                            deploymentActionType="install";
                          fi
                          
                        fi
                        
                        echo "Going with ${deploymentActionType} deployment mode..."
                        
                        
                        echo "Running pre-${deploymentActionType} steps..."
                        bash $(stepsRunnerUtil) -d "$(packageBaseDir)-unpackaged/${deploymentActionType}/before" -a "$(OrgAliasDevFS)" -w "$(pwd)"
                        
                        # disable exit on error
                        set +e
                        
                        DEPLOYMENT_LOG_FILE=$(mktemp)
                        
                        deployMaxRetryAttempts=$(deployRetryNumber);
                        deployRetryDelay=$(deployRetryTimeout);
                        deployRetryCounter=0;
                        
                        while true; do 
                          
                          DX_DEPLOY_STATUS_CODE=0;
                          
                          if [[ "$DX_DEPLOY_STATUS_CODE" == "0" ]]; then
                            echo "Running destructive operation before deploy into $(OrgAliasDevFS)..."
                            #sf force source deploy -u $(OrgAliasDevFS) --ignorewarnings --ignoreerrors --purgeondelete --manifest="destruct/package.xml" --predestructivechanges="destruct/destructiveChangesPre.xml" -w 1000 --verbose 2>&1 | tee $DEPLOYMENT_LOG_FILE; DX_DEPLOY_STATUS_CODE=${PIPESTATUS[0]};
                            sf project deploy start -o "$(OrgAliasDevFS)" --ignore-conflicts --ignore-warnings --ignore-errors --purge-on-delete --manifest="destruct/package.xml" --pre-destructive-changes="destruct/destructiveChangesPre.xml" -w 1000 --verbose 2>&1 | tee $DEPLOYMENT_LOG_FILE; DX_DEPLOY_STATUS_CODE=${PIPESTATUS[0]};
                          fi
                          
                          if [[ "$DX_DEPLOY_STATUS_CODE" == "0" ]]; then
                            echo "Actually deploying artifacts into $(OrgAliasDevFS)..."
                            #sf force source deploy --sourcepath="$(packageBaseDir)" -u $(OrgAliasDevFS) --testlevel "$TARGET_ORG_TEST_LEVEL" --junit --coverageformatters cobertura --ignorewarnings -w 1000 --verbose 2>&1 | tee $DEPLOYMENT_LOG_FILE; DX_DEPLOY_STATUS_CODE=${PIPESTATUS[0]};
                            sf project deploy start -d "$(packageBaseDir)" -o "$(OrgAliasDevFS)" --ignore-conflicts --ignore-warnings --test-level="$TARGET_ORG_TEST_LEVEL" --junit --coverage-formatters="cobertura" --concise -w 1000 2>&1 | tee $DEPLOYMENT_LOG_FILE; DX_DEPLOY_STATUS_CODE=${PIPESTATUS[0]};
                          fi
                          
                          if [[ "$DX_DEPLOY_STATUS_CODE" == "0" ]]; then
                            echo "Running destructive operation after deploy into $(OrgAliasDevFS)..."
                            #sf force source deploy -u $(OrgAliasDevFS) --ignorewarnings --ignoreerrors --purgeondelete --manifest="destruct/package.xml" --postdestructivechanges="destruct/destructiveChangesPost.xml" -w 1000 --verbose 2>&1 | tee $DEPLOYMENT_LOG_FILE; DX_DEPLOY_STATUS_CODE=${PIPESTATUS[0]};
                            sf project deploy start -o "$(OrgAliasDevFS)" --ignore-conflicts --ignore-warnings --ignore-errors --purge-on-delete --manifest="destruct/package.xml" --post-destructive-changes="destruct/destructiveChangesPost.xml" -w 1000 --verbose 2>&1 | tee $DEPLOYMENT_LOG_FILE; DX_DEPLOY_STATUS_CODE=${PIPESTATUS[0]};
                          fi
                          
                          # successful deployment - exit from retry loop
                          if [[ "$DX_DEPLOY_STATUS_CODE" == "0" ]]; then
                            break;
                          fi
                          
                          cat $DEPLOYMENT_LOG_FILE | grep -i -E -e "$(deployRetryErrorRegex)" -q; DX_DEPLOY_ERROR_TEMPORARY=$?;
                          
                          # permanent error - exit from retry loop
                          if [[ "$DX_DEPLOY_ERROR_TEMPORARY" != "0" ]]; then
                            break;
                          fi
                          
                          # retry if not run out of attempts
                          if [[ $deployRetryCounter -lt $deployMaxRetryAttempts ]]; then
                            
                            deployRetryCounter=$(( $deployRetryCounter + 1 ));
                            echo "Retrying deployment after temporarily failure in ${deployRetryDelay} seconds (attempt ${deployRetryCounter}/${deployMaxRetryAttempts})..."
                            sleep $deployRetryDelay;
                            
                          else
                            
                            echo "ERROR: Run out of retry attempts (max=${deployMaxRetryAttempts})"
                            break;
                            
                          fi
                          
                        done
                        
                        # early exit - deployment error
                        if [[ "$DX_DEPLOY_STATUS_CODE" != "0" ]]; then
                          
                          echo "Error when deploying '$(fsPackageName)' codebase into $(OrgAliasDevFS) org as user '$TARGET_ORG_USERNAME'!"
                          exit 1;
                          
                        fi
                        
                        # enable exit on error
                        set -e
                        
                        echo "Running post-${deploymentActionType} steps..."
                        bash $(stepsRunnerUtil) -d "$(packageBaseDir)-unpackaged/${deploymentActionType}/after" -a "$(OrgAliasDevFS)" -w "$(pwd)"
                        
                  displayName: 'Full Deploy to devFS'
                  
                
                - task: PublishTestResults@2
                  inputs:
                    testResultsFormat: 'JUnit'
                    testResultsFiles: '**/junit/junit.xml'
                  displayName: 'Publish Test Results'
                  continueOnError: true
                  condition: not(eq(variables['TARGET_ORG_TEST_LEVEL'], 'NoTestRun'))
                  retryCountOnTaskFailure: 1
                  
                - task: UseDotNet@2
                  displayName: 'Use .NET Core sdk 7.0.x'
                  inputs:
                    packageType: 'sdk'
                    version: 7.0.x
                  condition: not(eq(variables['TARGET_ORG_TEST_LEVEL'], 'NoTestRun'))
                  retryCountOnTaskFailure: 1
                    
                - task: PublishCodeCoverageResults@2
                  inputs:
                    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage/cobertura.xml'
                  displayName: 'Publish Coverage Results'
                  continueOnError: true
                  condition: not(eq(variables['TARGET_ORG_TEST_LEVEL'], 'NoTestRun'))
                  retryCountOnTaskFailure: 1
                  
                  
                - bash: |
                        
                        curl --retry 7 --retry-all-errors -H 'Content-Type: application/json' -d '{"text": "&#x26D4; **$(fsPackageName)** `$(Build.SourceBranchName)` ($(Build.Reason)) - PR deployment [failure]($(System.TeamFoundationCollectionUri)$(System.TeamProjectId)/_build/results?buildId=$(Build.BuildId)) into `$(OrgAliasDevFS)` org by $(Build.RequestedFor)!"}' $(notifErrorUrls)
                        
                  displayName: 'Send Notification re Failed Deployment'
                  condition: failed()
                  
                - ${{ if and( eq(parameters.shouldNotifySubscribers, true), not( contains(variables['Build.SourceVersionMessage'], '[SKIP PACKAGE]') ) ) }}:
                  
                  - template: templates/notifySubscribers.yml
                    parameters:
                      ${{ if eq(variables['Build.SourceBranchName'], 'dev-jpn') }}:
                        subscribers: $(subs_deployPR_FsJpn)
                      ${{ elseif eq(variables['Build.SourceBranchName'], 'dev') }}:
                        subscribers: $(subs_deployPR_FsDev)
                      ${{ elseif eq(variables['Build.SourceBranchName'], 'master') }}:
                        subscribers: $(subs_deployPR_FsRelease)
                      ${{ elseif eq(variables['Build.SourceBranchName'], 'master-patch') }}:
                        subscribers: $(subs_deployPR_FsPatch)
                      active: $(enableSubsDeployPR)
                  
