name: 'Push Field Service Package Version into Set of EMEA Orgs by Schedule'


trigger: none

pr: none

#schedules:
#- cron: '0 5 * * *'
#  displayName: Nightly Field Service Package Version Bulk Push to EMEA
#  branches:
#    include:
#    - dev-emea
#  always: false


parameters:

- name: versionToPushOrgAuthFiles
  displayName: Auth Files for Orgs to upgrade (comma-separated)
  type: string
  default: "authFile_devEMEA,authFile_emeaPool1,authFile_emeaPool2,authFile_emeaPool3"

- name: versionToPushExpression
  displayName: Package version expression to upgrade to
  type: string
  default: "X.* (Beta ?)"

- name: versionWhereCondition
  displayName: Where Condition for version to upgrade
  type: string
  default: "Branch IN ('dev-emea')"

- name: shouldInstallThirdParties
  displayName: Install Third Parties?
  type: boolean
  default: true

- name: autoInstallDependencies
  displayName: Auto Install Dependencies?
  type: boolean
  default: false

- name: installOnlyDependencies
  displayName: Install Only Dependencies?
  type: boolean
  default: false

- name: shouldRunAqaTests
  displayName: Run AQA Tests?
  type: boolean
  default: false

- name: shouldRunTestsBefore
  displayName: Run Tests Before?
  type: boolean
  default: true

- name: shouldRunTestsAfter
  displayName: Run Tests After?
  type: boolean
  default: true

- name: runTestsBeforeAsConcurrent
  displayName: Concurrent Tests Before?
  type: boolean
  default: true

- name: runTestsAfterAsConcurrent
  displayName: Concurrent Tests After?
  type: boolean
  default: true


variables:

- template: templates/variables.yml


stages:

- ${{ if not(eq(parameters.versionToPushOrgAuthFiles, 'none')) }}:
  
  - template: templates/bulkPushVersion.yml
    parameters:
      localizationDomain: "EMEA"
      ${{ if eq(parameters.versionToPushOrgAuthFiles, 'default') }}:
        versionToPushOrgAuthFiles: $(push_FsEmea_toEmea)
      ${{ else }}:
        versionToPushOrgAuthFiles: ${{ parameters.versionToPushOrgAuthFiles }}
      versionToPushExpression: ${{ parameters.versionToPushExpression }}
      versionWhereCondition: ${{ parameters.versionWhereCondition }}
      autoInstallDependencies: ${{ parameters.autoInstallDependencies }}
      installOnlyDependencies: ${{ parameters.installOnlyDependencies }}
      shouldInstallThirdParties: ${{ parameters.shouldInstallThirdParties }}
      shouldRunTestsBefore: ${{ parameters.shouldRunTestsBefore }}
      runTestsBeforeAsConcurrent: ${{ parameters.runTestsBeforeAsConcurrent }}
      shouldRunTestsAfter: ${{ parameters.shouldRunTestsAfter }}
      runTestsAfterAsConcurrent: ${{ parameters.runTestsAfterAsConcurrent }}
      shouldRunAqaTests: ${{ parameters.shouldRunAqaTests }}


