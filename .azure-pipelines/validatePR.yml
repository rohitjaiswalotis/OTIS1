name: 'SF Field Service Validate PR'


trigger: none
    
pr: none

variables:

- template: templates/variables.yml

- name: counter
  value: $[counter(variables['build.reason'], 0)]


stages:
    
    - stage: ValidatePMD
      
      displayName: ValidatePMD
      
      jobs:
          
          - job: ValidatePMD
            
            displayName: 'Validate PMD'
            
            pool:
                vmImage: 'ubuntu-latest'
            
            steps:
            
            - checkout: self
              fetchDepth: 0
              persistCredentials: true
              
            - template: templates/scanPMD.yml
              parameters:
                pathToScan: $(packageBaseDir)
              
      
    - stage: Testing
      
      displayName: 'Unit testing'
      
      lockBehavior: runLatest
      
      jobs:
          
          - job : UnitTests
            
            displayName: 'Unit testing'     
            
            timeoutInMinutes: 0
            
            pool:
                vmImage: 'ubuntu-latest'
            
            steps:
                
                - template: templates/init.yml
                  
                - task: DownloadSEcureFile@1
                  name: fsPoolAuthFile
                  inputs:
                    secureFile: fsPool
                  displayName: 'Copy fsPool secure file'
                  
                - task: DownloadSEcureFile@1
                  name: fsMasterPoolAuthFile
                  inputs:
                    secureFile: fsMasterPool
                  displayName: 'Copy fsMasterPool secure file'
                  
                - script: |
                      
                      echo "Number of pipelines execution for $(Build.Reason): $(counter)"
                      execCounter=$(echo $(counter))
                      
                      # select pool based on target branch (in case of PR), otherwise go with reasonable default
                      
                      fsPoolFilePath="$(fsPoolAuthFile.secureFilePath)";
                      
                      if [[ "$(Build.Reason)" =~ ^PullRequest$ ]]; then
                        
                        if [[ "$(System.PullRequest.TargetBranchName)" =~ ^master$ ]]; then
                          fsPoolFilePath="$(fsMasterPoolAuthFile.secureFilePath)";
                          
                        fi
                        
                      fi
                      
                      fsPool=$(cat "$fsPoolFilePath");
                      poolLength=$(echo $fsPool | jq 'length');
                      echo "Number of orgs avaliable in pool: $poolLength"
                      
                      orgIndexInPool=$(( $execCounter % $poolLength ))
                      echo "Org index to be used: $orgIndexInPool"
                      
                      # get org by evaluated index from pool
                      validationOrg=$(echo $fsPool | jq -r ".[$((${orgIndexInPool}))]")
                      
                      # parse alias and auth url
                      validationOrgAlias=$(echo $validationOrg | jq -r '.alias // "validationOrg"')
                      validationOrgAuthUrl=$(echo $validationOrg | jq -r '.authUrl // empty')
                      
                      # early exit - no org alias available
                      if [[ ! ${validationOrgAuthUrl:+1} ]]; then
                        echo "Cannot get org auth url from pool!"
                        exit -1
                      fi
                      
                      echo "Org chosen for validation: ${validationOrgAlias}"
                      
                      # create temporary file with auth url
                      validationOrgAuthFile=$(mktemp)
                      echo -n "$validationOrgAuthUrl" >> $validationOrgAuthFile
                      
                      # set variable to pass validation org alias to next steps
                      echo "##vso[task.setvariable variable=validationOrgAlias]${validationOrgAlias}"
                      
                      # set variable to pass validation org auth file to next steps
                      echo "##vso[task.setvariable variable=validationOrgAuthFile]${validationOrgAuthFile}"
                      
                  displayName: Select Validation Org from Pool
                  
                - template: templates/installThirdParties.yml
                  parameters:
                    targetOrgAuthFilePath: $(validationOrgAuthFile)
                    continueOnError: true
                  
                - script: |
                      
                      validationOrgAuthFile=$(validationOrgAuthFile)
                      validationOrgAlias=$(validationOrgAlias)
                      
                      # authorize to validation org
                      DX_AUTH_RESPONSE=$(sf org login sfdx-url -f "$validationOrgAuthFile" -a "$validationOrgAlias" --json);
                      DX_STATUS_CODE=$(echo "$DX_AUTH_RESPONSE" | jq .status);
                      
                      # early exit - error when authorizing to target org by auth url
                      if [[ "$DX_STATUS_CODE" != "0" ]]; then
                        echo "Error when logging into $validationOrgAlias org by auth url!"
                        echo "$DX_AUTH_RESPONSE" | jq .
                        exit 1;
                      fi
                      
                      TARGET_ORG_USERNAME=$(echo "$DX_AUTH_RESPONSE" | jq -r .result.username);
                      
                      echo "Successfully logged into $validationOrgAlias org by auth url as user '${TARGET_ORG_USERNAME:-unknown}'"
                      
                      rm -f $validationOrgAuthFile
                      
                      echo "List of already installed packages in $validationOrgAlias org: "
                      sf package installed list --target-org="$validationOrgAlias"
                      
                      # set variable to pass username to next steps
                      echo "##vso[task.setvariable variable=TARGET_ORG_USERNAME]$TARGET_ORG_USERNAME"
                      
                  displayName: 'Authenticate to Validation Org'
                  
                  
                - template: templates/scanFlows.yml
                  parameters:
                    pathToScan: $(packageBaseDir)
                    continueOnError: true
                    
                  
                - script: |
                      
                      validationOrgAlias=$(validationOrgAlias)
                      
                      set -e
                      
                      echo "Reconciling profiles..."
                      bash $(reconcileProfilesUtil) -d "$(packageBaseDir)/main/default/profiles" -a "$validationOrgAlias" -o "$(packageBaseDir)/main/default/profiles" -p "$(profilesToReconcile)"
                      
                      echo "Validating source code..."
                      
                      bash $(stepsRunnerUtil) -d "$(rulesValidationScript)" -w "$(pwd)"
                      
                      sf force source deploy -p $(packageBaseDir) -u "$validationOrgAlias" --checkonly --testlevel RunLocalTests --junit --verbose --coverageformatters cobertura -w 1000
                      
                  displayName: Validate Changes against Org
                  
                  
                - task: PublishTestResults@2
                  inputs:
                    testResultsFormat: 'JUnit'
                    testResultsFiles: '**/junit/junit.xml'
                  displayName: 'Publish Test Results'
                  continueOnError: true
                  
                - task: UseDotNet@2
                  displayName: 'Code Coverage Report'
                  inputs:
                    packageType: 'sdk'
                    version: '3.1.x'
                    
                - task: PublishCodeCoverageResults@1
                  inputs:
                    codeCoverageTool: 'Cobertura'
                    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage/cobertura.xml'
                  displayName: 'Publish Coverage Results'
                  continueOnError: true
    
